operator delete[] is a regular function that can be called explicitly just as any other function.
But in C++, delete[] is an operator with a very specific behavior: An expression with the delete[]
operator, first calls the appropriate destructors for each element in the array (if these are of
a class type), and then calls an array deallocation function.

The delete[] operator may be applied only to a pointer to an array returned by new of an array or to
the null pointer (§7.2.2). Applying delete[] to the null pointer has no effect.
However, do not use new to create local objects. For example:
void f1()
{
    X∗ p =new X;
    // ... use *p ...
    delete p;
}

That’s verbose, inefficient, and error-prone (§13.3). In particular, a return or an exception thrown
before the delete will cause a memory leak (unless even more code is added). Instead, use a local
variable:
void f2()
{
    X x;
    // ... use x ...
}

The local variable x is implicitly destroyed upon exit from f2 .
